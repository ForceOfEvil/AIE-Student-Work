//////////////////////////////////////////////////////////////////////////
//		@file				Mathmatics.cpp
//		@details			Math implementation
//		@author				Derek Potter
//		@date last edited	11/5/2013
//////////////////////////////////////////////////////////////////////////
#include "Mathmatics.h"
#include <math.h>


//////////////////////////////////////////////////////////////////////////
//		The constructor
//////////////////////////////////////////////////////////////////////////
oVector2::oVector2(){

	m_fX = 0;
	m_fY = 0;

}

//////////////////////////////////////////////////////////////////////////
//		Returns the X vector
//////////////////////////////////////////////////////////////////////////
float oVector2::GetVectorX(){

	return m_fX;

}

//////////////////////////////////////////////////////////////////////////
//		Returns the Y vector
//////////////////////////////////////////////////////////////////////////
float oVector2::GetVectorY(){

	return m_fY;

}

//////////////////////////////////////////////////////////////////////////
//		Sets the X and Y vectors
//////////////////////////////////////////////////////////////////////////
void oVector2::SetVector(float a_fX, float a_fY){

	m_fX = a_fX;
	m_fY = a_fY;

}

//////////////////////////////////////////////////////////////////////////
//		Returns the dot product
//////////////////////////////////////////////////////////////////////////
double oVector2::DotProduct(oVector2 & rpVec){

	return ((m_fX * rpVec.GetVectorX()) + (m_fY * rpVec.GetVectorY()));

}

//////////////////////////////////////////////////////////////////////////
//		Normalizes the vector
//////////////////////////////////////////////////////////////////////////
oVector2 oVector2::Normalize(){

	oVector2 pDummy;

	double fMag = Magnitude();

	pDummy.SetVector(m_fX / fMag, m_fY / fMag);

	return pDummy;

}

//////////////////////////////////////////////////////////////////////////
//		Gets a vector perpendicular to the current vector
//////////////////////////////////////////////////////////////////////////
oVector2 oVector2::Perpendicular(oVector2 & rpVec){

	oVector2 pDummy;

	pDummy.SetVector(rpVec.GetVectorY(), rpVec.GetVectorX() * -1);

	return pDummy;

}

//////////////////////////////////////////////////////////////////////////
//		Gets the magnitude of the vector
//////////////////////////////////////////////////////////////////////////
double oVector2::Magnitude(){

	return sqrt(pow(m_fX, 2) + pow(m_fY, 2));

}

//////////////////////////////////////////////////////////////////////////
//		Converts radians to degrees
//////////////////////////////////////////////////////////////////////////
double oVector2::ConvertToDegrees(double a_Radians){
	return (a_Radians / PI) * 180;
}

//////////////////////////////////////////////////////////////////////////
//		Gets the angle (in degrees) between two vectors
//////////////////////////////////////////////////////////////////////////
double oVector2::GetAngle(oVector2 & rpVec){

	double Degrees = 0;

	oVector2 Dummy;

	// two vectors mutiplied returns the dot product
	Degrees = DotProduct(rpVec);

	Degrees /= Magnitude() * rpVec.Magnitude();

	Degrees = acos(Degrees);

	//dividing the vecotor by a double returns the double converted into degrees
	Degrees = ConvertToDegrees(Degrees);

	return Degrees;


}

//////////////////////////////////////////////////////////////////////////
//		The destructor
//////////////////////////////////////////////////////////////////////////
oVector2::~oVector2(){

	//Gru

}

//////////////////////////////////////////////////////////////////////////
//		The constructor
//////////////////////////////////////////////////////////////////////////
oVector3::oVector3(){

	m_fX = 0;
	m_fY = 0;

}

//////////////////////////////////////////////////////////////////////////
//		Returns the X vector
//////////////////////////////////////////////////////////////////////////
float oVector3::GetVectorX(){

	return m_fX;

}

//////////////////////////////////////////////////////////////////////////
//		Returns the Y vector
//////////////////////////////////////////////////////////////////////////
float oVector3::GetVectorY(){

	return m_fY;

}

//////////////////////////////////////////////////////////////////////////
//		Returns the Z vector
//////////////////////////////////////////////////////////////////////////
float oVector3::GetVectorZ(){

	return m_fZ;

}

//////////////////////////////////////////////////////////////////////////
//		Sets the X and Y vectors
//////////////////////////////////////////////////////////////////////////
void oVector3::SetVector(float a_fX, float a_fY, float a_fZ){

	m_fX = a_fX;
	m_fY = a_fY;
	m_fZ = a_fZ;

}

//////////////////////////////////////////////////////////////////////////
//		Returns the dot product
//////////////////////////////////////////////////////////////////////////
double oVector3::DotProduct(oVector3 & rpVec){
	return (m_fX * rpVec.GetVectorX() + m_fY * rpVec.GetVectorY() + m_fZ * rpVec.GetVectorZ());
}

//////////////////////////////////////////////////////////////////////////
//		Returns a normal of the vector
//////////////////////////////////////////////////////////////////////////
oVector3 oVector3::Normalize(){

	oVector3 pDummy;

	double fMag = Magnitude();

	pDummy.SetVector(m_fX / fMag, m_fY / fMag, m_fZ / fMag);

	return pDummy;

}

//////////////////////////////////////////////////////////////////////////
//		Returns the magnitude
//////////////////////////////////////////////////////////////////////////
double oVector3::Magnitude(){
	
	return sqrt(pow(m_fX, 2) + pow(m_fY, 2) + pow(m_fZ, 2));

}

//////////////////////////////////////////////////////////////////////////
//		Converts radians to degrees
//////////////////////////////////////////////////////////////////////////
double oVector3::ConvertToDegrees(double a_Radians){
	return (a_Radians / PI) * 180;
}

//////////////////////////////////////////////////////////////////////////
//		Returns the cross product
//////////////////////////////////////////////////////////////////////////
oVector3 oVector3::CrossProduct(oVector3 & rpVecB){

	oVector3 pDummy;

	pDummy.SetVector(m_fY * rpVecB.m_fZ - m_fZ * rpVecB.m_fY,
					 m_fZ * rpVecB.m_fX - m_fX * rpVecB.m_fZ,
					 m_fX * rpVecB.m_fY - m_fY * rpVecB.m_fX);

	return pDummy;

}

//////////////////////////////////////////////////////////////////////////
//		The destructor
//////////////////////////////////////////////////////////////////////////
oVector3::~oVector3(){

	//Gru

}







