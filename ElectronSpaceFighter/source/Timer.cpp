//////////////////////////////////////////////////////////////////////////
//		@file				Timer.cpp
//		@details			implementation of the timer class
//		@author				Derek Potter
//		@version			1.0
//		@date last edited	10/7/2013
//////////////////////////////////////////////////////////////////////////

#include "AIE.h"
#include "Timer.h"

//////////////////////////////////////////////////////////////////////////
//		Initializing the timer
//////////////////////////////////////////////////////////////////////////
oTimer::oTimer(){

	bRunning = 0;
	ulEndTime = 0;
	ulTime = 0;

}

//////////////////////////////////////////////////////////////////////////
//		Starts a timer with an end time
//////////////////////////////////////////////////////////////////////////
void oTimer::a_Start(unsigned long ulRunTime){

	bRunning = 1;
	ulEndTime = ulRunTime;

}

//////////////////////////////////////////////////////////////////////////
//		Stops a timer (needed seperate from reset for bosses and levels)
//////////////////////////////////////////////////////////////////////////
bool oTimer::a_bStop(){

	if(ulTime == ulEndTime){
		bRunning = 0;
		return 1;
	}

	return 0;

}

//////////////////////////////////////////////////////////////////////////
//		Resets a timer so it begins again
//////////////////////////////////////////////////////////////////////////
void oTimer::a_Reset(){

	bRunning = 1;
	ulTime = 0;

}

//////////////////////////////////////////////////////////////////////////
//		returns the time (for scripted events)
//////////////////////////////////////////////////////////////////////////
unsigned long oTimer::a_ulGetTime(){

	return ulTime;

}

void oTimer::a_Running(){

	if(bRunning == 1)
		ulTime++;

}

//////////////////////////////////////////////////////////////////////////
//		The destructor, it does nothing and feels lonely... SCIENCE!
//////////////////////////////////////////////////////////////////////////
oTimer::~oTimer(){

	//strange creatures lurk in the depths of this function

}