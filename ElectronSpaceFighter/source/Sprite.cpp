//////////////////////////////////////////////////////////////////////////
//		@file				Objects.cpp
//		@details			Objects class implementation
//		@author				Derek Potter
//		@version			1.0
//		@date last edited	10/30/2013
//////////////////////////////////////////////////////////////////////////
#include "Sprite.h"
#include "AIE.h"

//////////////////////////////////////////////////////////////////////////
//		The constructor, blank because more options are needed to inisialise objects
//////////////////////////////////////////////////////////////////////////
oSprite::oSprite(){

	m_iWidth = 0;
	m_iHeight= 0;
	pPosition.SetVector(ciStartPos, ciStartPos);
	pSpeed.SetVector(0,0);
	m_uiSprite = -1;
	m_bAlive = false;
}

//////////////////////////////////////////////////////////////////////////
//		Fully creates an object
//////////////////////////////////////////////////////////////////////////
void oSprite::Create(float a_fPosX, float a_fPosY, float a_fSpeedX, float a_fSpeedY, int a_iWidth, int a_iHeight){

	m_bAlive = true;
	m_iWidth = a_iWidth;
	m_iHeight = a_iHeight;
	pPosition.SetVector(a_fPosX, a_fPosY);
	pSpeed.SetVector(a_fSpeedX, a_fSpeedY);

}

//////////////////////////////////////////////////////////////////////////
//		Sets the sprite
//////////////////////////////////////////////////////////////////////////
void oSprite::SetSprite(unsigned int a_uiSprite){

	m_uiSprite = a_uiSprite;

}

//////////////////////////////////////////////////////////////////////////
//		Returns the current sprite
//////////////////////////////////////////////////////////////////////////
unsigned int oSprite::GetSprite(){
	
	return m_uiSprite;

}

void oSprite::SetAlive(bool a_bAlive){

	m_bAlive = a_bAlive;

}

//////////////////////////////////////////////////////////////////////////
//		Returns the objects alive satus
//////////////////////////////////////////////////////////////////////////
bool oSprite::GetAlive(){

	return m_bAlive;

}

//////////////////////////////////////////////////////////////////////////
//		Sets an objects height and width
//////////////////////////////////////////////////////////////////////////
void oSprite::SetDimensions(int a_iWidth, int a_iHeight){

	m_iWidth = a_iWidth;
	m_iHeight = a_iHeight;

}

//////////////////////////////////////////////////////////////////////////
//		Returns the width
//////////////////////////////////////////////////////////////////////////
int oSprite::GetWidth(){

	return m_iWidth;

}

//////////////////////////////////////////////////////////////////////////
//		Returns the height
//////////////////////////////////////////////////////////////////////////
int oSprite::GetHeight(){

	return m_iHeight;

}

//////////////////////////////////////////////////////////////////////////
//		Checks screen collision, and returns where its colliding with the screen
//////////////////////////////////////////////////////////////////////////
bool oSprite::TestScreenCollision(int a_TestSide){

	if(a_TestSide == ciLeftCollision && ((pPosition.GetVectorX() - (m_iWidth / 2)) < 0)){
		return true;
	}

	else if(a_TestSide == ciRightCollision && (pPosition.GetVectorX() + (m_iWidth / 2)) > ciSCREEN_X){
		return true;
	}

	else if(a_TestSide == ciTopCollision && (pPosition.GetVectorY() - (m_iHeight / 2)) < 0){
		return true;
	}

	else if(a_TestSide == ciBottomCollision && (pPosition.GetVectorY() + (m_iHeight / 2)) > ciSCREEN_Y){
		return true;
	}

	else
	return false;
}

//////////////////////////////////////////////////////////////////////////
//		Tests the collision between two objects
//////////////////////////////////////////////////////////////////////////
bool oSprite::TestCollision(oSprite & rpSprite){
	
	if(pPosition.GetVectorX() + GetWidth() / 2 > rpSprite.pPosition.GetVectorX() - rpSprite.GetWidth() / 2)

	if(pPosition.GetVectorX() - GetWidth() / 2 < rpSprite.pPosition.GetVectorX() + rpSprite.GetWidth() / 2)

	if(pPosition.GetVectorY() + GetHeight() / 2 > rpSprite.pPosition.GetVectorY() - rpSprite.GetHeight() / 2)

	if(pPosition.GetVectorY() - GetHeight() / 2 < rpSprite.pPosition.GetVectorY() + rpSprite.GetHeight() / 2)
		return true;

	return false;

}

//////////////////////////////////////////////////////////////////////////
//		Kills an objects and moves it off screen
//////////////////////////////////////////////////////////////////////////
void oSprite::Kill(){

	m_bAlive = false;
	pPosition.SetVector(ciStartPos, ciStartPos);
	pSpeed.SetVector(0,0);

}

//////////////////////////////////////////////////////////////////////////
//		Destructor
//////////////////////////////////////////////////////////////////////////
oSprite::~oSprite(){
	//Science!
}